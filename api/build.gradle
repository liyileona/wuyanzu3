/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'

def Properties versionProps = new Properties()
versionProps.load(new FileInputStream(file('../version.properties')))

group = 'com.google.android.apps.muzei'
version = versionProps['apiName']


def Properties props = new Properties()
props.load(new FileInputStream(file('../local.properties')))

allprojects { ext."signing.keyId" = props["signing.keyId"] }
allprojects { ext."signing.password" = props["signing.password"] }
allprojects { ext."signing.secretKeyRingFile" = props["signing.secretKeyRingFile"] }

dependencies {
    compile "com.android.support:support-annotations:$rootProject.ext.supportLibraryVersion"
}
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion rootProject.ext.targetSdkVersion

        manifestPlaceholders = [api_version: versionProps['apiCode'].toInteger()]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

task androidJavadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    configure(options) {
        windowTitle = "Muzei API"
        docTitle = "Muzei API"
        noTree = true
        noNavBar = true
        noHelp = true
        noDeprecated = true
    }
    doLast {
        copy {
            from "javadoc-scripts"
            into new File(destinationDir, "resources")
            include "prettify.*"
            include "javadoc_stylesheet.css"
        }
        exec {
            commandLine "python", "javadoc-scripts/tweak_javadoc_html.py", destinationDir.toString()
        }
        copy {
            from "javadoc-scripts"
            into destinationDir
            include "index.html"
        }
    }
}

// Add in dependency classpath
afterEvaluate {
    androidJavadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompile.classpath.files
    })
}

task javadocJar(type: Jar, dependsOn: androidJavadoc) {
    classifier = 'javadoc'
    from androidJavadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// http://jedicoder.blogspot.com/2011/11/automated-gradle-project-deployment-to.html
// TODO: switch to http://www.gradle.org/docs/current/userguide/publishing_maven.html

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: props["sonatypeUsername"], password: props["sonatypePassword"])
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: props["sonatypeUsername"], password: props["sonatypePassword"])
            }

            pom.project {
               name 'Muzei API'
               packaging 'aar'
               description 'The Muzei API allows you to extend Muzei with custom sources'
               url 'http://api.muzei.co'

               scm {
                   url 'https://github.com/romannurik/muzei.git'
                   connection 'scm:git:https://github.com/romannurik/muzei'
                   developerConnection 'scm:git:https://github.com/romannurik/muzei'
               }

               licenses {
                   license {
                       name 'The Apache Software License, Version 2.0'
                       url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                       distribution 'repo'
                   }
               }

               developers {
                   developer {
                       id 'romannurik'
                       name 'Roman Nurik'
                   }
               }
           }
        }
    }
}
